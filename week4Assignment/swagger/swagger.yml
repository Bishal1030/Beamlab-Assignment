openapi: 3.0.0
info:
  title: API DOCUMENTATION OF SMALL PORTION OF E-COMMERCE FUNCTIONALITY
  version: 1.0.0

servers:
  - url: http://localhost:3003

paths:
  /api/v1/register:
    post:
      tags:
        - Register
      summary: Create a new User
      description: API endpoint to register a new user with name, email, and password.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        "201":
          description: Successfully Registered
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponse"
        "400":
          description: Bad request (Invalid input or missing fields)
        "500":
          description: Internal Server Error

  /api/v1/user/login:
    post:
      tags:
        - Login
      summary: Login as User
      description: API endpoint for user login with email and password.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: "johndoe@example.com"
                password:
                  type: string
                  format: password
                  example: "StrongPassword123"
              required:
                - email
                - password
      responses:
        "200":
          description: Successfully Logged In
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponse"
        "400":
          description: Bad request (Invalid email or password)
        "401":
          description: Unauthorized (Invalid credentials)
        "500":
          description: Internal Server Error

  /api/v1/admin/login:
    post:
      tags:
        - Login
      summary: Login as Admin
      description: API endpoint for admin login with email and password.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: "admin@example.com"
                password:
                  type: string
                  format: password
                  example: "AdminPassword123"
              required:
                - email
                - password
      responses:
        "200":
          description: Successfully Logged In
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponse"
        "400":
          description: Bad request (Invalid email or password)
        "401":
          description: Unauthorized (Invalid credentials)
        "500":
          description: Internal Server Error

  /api/v1/products/create:
    post:
      tags:
        - Product
      summary: Create a new Product
      description: API endpoint to create a new product with name, description, price, and stock.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Product"
      responses:
        "201":
          description: Successfully Created Product
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductResponse"
        "400":
          description: Bad request (Invalid input or missing fields)
        "500":
          description: Internal Server Error

  /api/v1/products:
    get:
      tags:
        - Product
      summary: Get all Products
      description: API endpoint to retrieve all products.
      responses:
        "200":
          description: Successfully Retrieved Products
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Product"
        "500":
          description: Internal Server Error

  /api/v1/products/{id}:
    get:
      tags:
        - Product
      summary: Get a single Product by ID
      description: API endpoint to retrieve a product by its ID.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            example: 1
      responses:
        "200":
          description: Successfully Retrieved Product
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
        "404":
          description: Product Not Found
        "500":
          description: Internal Server Error

    put:
      tags:
        - Product
      summary: Update a Product by ID
      description: API endpoint to update an existing product by its ID.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Product"
      responses:
        "200":
          description: Successfully Updated Product
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
        "400":
          description: Bad request (Invalid input or missing fields)
        "404":
          description: Product Not Found
        "500":
          description: Internal Server Error

  /api/v1/orders:
    get:
      tags:
        - Order
      summary: Get all Orders
      description: API endpoint to retrieve all orders (requires authentication and authority).
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Successfully Retrieved Orders
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Order"
        "403":
          description: Forbidden (Access denied, user does not have the required role)
        "500":
          description: Internal Server Error

  /api/v1/orders/{id}:
    post:
      tags:
        - Order
      summary: Create an Order
      description: API endpoint to create a new order (requires authentication).
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            example: 1
            description: Product ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                quantity:
                  type: integer
                  example: 3
              required:
                - quantity
      security:
        - bearerAuth: []
      responses:
        "201":
          description: Successfully Created Order
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OrderResponse"
        "403":
          description: Forbidden (Access denied, user does not have the required role)
        "500":
          description: Internal Server Error

    delete:
      tags:
        - Order
      summary: Delete an Order
      description: API endpoint to delete an order (requires authentication).
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            example: 1
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Successfully Deleted Order
        "403":
          description: Forbidden (Access denied, user does not have the required role)
        "500":
          description: Internal Server Error

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      properties:
        name:
          type: string
          example: "John Doe"
        email:
          type: string
          format: email
          example: "johndoe@example.com"
        password:
          type: string
          format: password
          example: "StrongPassword123"
      required:
        - name
        - email
        - password

    UserResponse:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: "John Doe"
        email:
          type: string
          example: "johndoe@example.com"
        token:
          type: string
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        message:
          type: string
          example: "User logged in successfully"

    Product:
      type: object
      properties:
        name:
          type: string
          example: "Laptop"
        description:
          type: string
          example: "A high-performance laptop for gaming and work."
        price:
          type: integer
          example: 1500
        stock:
          type: integer
          example: 50
      required:
        - name
        - description
        - price
        - stock

    ProductResponse:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: "Laptop"
        description:
          type: string
          example: "A high-performance laptop for gaming and work."
        price:
          type: integer
          example: 1500
        stock:
          type: integer
          example: 50
        message:
          type: string
          example: "Product created successfully"

    Order:
      type: object
      properties:
        orderId:
          type: integer
          example: 1
        productId:
          type: integer
          example: 2
        quantity:
          type: integer
          example: 3
        userId:
          type: integer
          example: 1
        status:
          type: string
          example: "pending"
        totalPrice:
          type: integer
          example: 4500
      required:
        - quantity

    OrderResponse:
      type: object
      properties:
        message:
          type: string
          example: "Order created"
        data:
          type: object
          properties:
            id:
              type: integer
              example: 28
            productId:
              type: integer
              example: 12
            quantity:
              type: integer
              example: 3
            totalPrice:
              type: integer
              example: 204000
            updatedAt:
              type: string
              format: date-time
              example: "2025-03-17T05:44:41.216Z"
            createdAt:
              type: string
              format: date-time
              example: "2025-03-17T05:44:41.216Z"